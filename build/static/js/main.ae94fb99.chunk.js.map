{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","title","primaryimageurl","dated","images","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","map","person","displayname","src","alt","Loading","Preview","searchResults","setFeaturedResult","info","fetchPage","pageUrl","results","disabled","prev","next","record","index","key","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","catch","err","log","onSubmit","htmlFor","type","placeholder","onChange","target","length","name","item","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae94fb99.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=39b55001-dcbf-4e24-b613-692f8e2d552f';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n    const {searchTerm, searchValue, setIsLoading, setSearchResults} = props;\n  \n    return(\n     <span className=\"content\">\n      <a href=\"#\" onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true)\n          try{\n              const result = await fetchQueryResultsFromTermAndValue(searchTerm,searchValue);\n              setSearchResults(result);\n          }\n          catch(err){\n              console.error(err);\n          }\n          finally{\n              setIsLoading(false);\n          }\n      }}>{searchValue}</a>\n     </span>\n    )\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\n const Feature = (props) => {\n    const {featuredResult, setSearchResults, setIsLoading} = props;\n    const {title, dated, images, primaryimageurl, description, culture, style,\n      technique, medium, dimensions, people, department, division, contact, creditline} = featuredResult||{}\n   \n     return (\n         <div>\n         {featuredResult ? (<main id=\"feature\">\n         <div className=\"object-feature\">\n            <header>\n                <h3>{featuredResult.title}</h3>\n                <h4>{featuredResult.dated}</h4>\n           </header>\n            <section className=\"facts\">\n            <span className=\"title\">{\"Culture\"}</span>\n\n            <Searchable setIsLoading = {setIsLoading} setSearchResults = {setSearchResults} searchTerm = {\"Culture\"} searchValue = {culture}/>\n\n            <span className=\"title\">Technique</span>\n\n            <Searchable setIsLoading = {setIsLoading} setSearchResults = {setSearchResults} searchTerm = {\"Technique\"} searchValue = {technique}/>\n\n            <span className=\"title\">Medium</span>\n\n            <Searchable setIsLoading = {setIsLoading} setSearchResults = {setSearchResults} searchTerm = {\"Medium\"} searchValue = {medium}/>\n\n           {people? people.map((person) => {\n               return (<Searchable setIsLoading = {setIsLoading} setSearchResults = {setSearchResults} searchTerm = {\"Person\"} searchValue = {person.displayname}/>)\n           }):null}\n           {description?\n            <>\n             <span className=\"title\">Description </span>\n             <span className=\"content\">{description}</span>\n            </> : null}\n\n            {style?\n            <>\n             <span className=\"title\">Style </span>\n             <span className=\"content\">{style}</span>\n             </>: null}\n  \n             {dimensions?\n             <>\n             <span className=\"title\">Dimensions </span>\n             <span className=\"content\">{dimensions}</span>\n            </> :null}\n  \n            {department?\n            <>\n             <span className=\"title\">Department </span>\n             <span className=\"content\">{department}</span>\n            </> :null}\n  \n            {contact?\n            <>\n             <span className=\"title\">Contact </span>\n             <span className=\"content\">{contact}</span>\n            </> :null}\n            {division?\n            <>\n             <span className=\"title\">Division </span>\n             <span className=\"content\">{division}</span>\n            </>  :null}\n          \n            {creditline?\n            <>\n             <span className=\"title\">Credit Line</span>\n             <span className=\"content\">{creditline}</span>\n            </> :null}\n            </section>\n            <section className=\"photos\">\n              <img src={primaryimageurl} alt={title}/>\n            </section>\n         </div>\n        </main> ):(<main id=\"feature\"></main>)}\n   </div>\n    )}\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\nconst Loading = () => {\n\n    return(\n     <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n     </div>\n    )};\n    \nexport default Loading;\n","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  const {searchResults, setIsLoading, setSearchResults, setFeaturedResult} = props;\n  const info = searchResults.info;\n  const records = searchResults.records;\n\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev} \n        className=\"previous\"\n        onClick={() => {fetchPage(info.prev)}}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next}\n        className=\"next\"\n        onClick={() => {fetchPage(info.next)}}>Next</button>\n    </header>\n    <section className=\"results\">\n      \n      {\n        records.map((record,index) => <div\n        key= {index}\n        className = \"object-preview\"\n        onClick = {(event) => {\n          event.preventDefault();\n          setFeaturedResult(record)\n        }}>\n          {\n            record.primaryimageurl?  <img src={ record.primaryimageurl } alt={ record.description } /> : null\n          }\n          {record.title? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>}\n        </div>)\n\n\n\n\n        /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  const {setIsLoading, setSearchResults } = props;\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n\n  const updateSearchQuery = (event) =>\n    setQueryString(event.target.value);\n\n  const updateClassification = (event) =>\n    setClassification(event.target.value);\n\n  const updateCentury = (event) =>\n      setCentury (event.target.value);\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    \n    Promise.all([fetchAllCenturies(), fetchAllClassifications()]).then((results) => {\n      setCenturyList(results[0])\n      setClassificationList(results[1])\n    }).catch((err) => console.log(err));\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  console.log(classificationList, centuryList)\n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault();\n    setIsLoading(true);\n    try{\n      const results = await fetchQueryResults({century, classification, queryString});\n      setSearchResults(results);\n    }\n    catch(err){\n      console.error(err)\n    }\n    finally{\n       setIsLoading(false);\n    }\n\n\n\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={updateSearchQuery}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={updateClassification}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((item) => <option value ={item.name}  >{item.name} </option>)}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={updateCentury}>\n        <option value=\"any\">Any</option>\n        {centuryList.map((item) => <option value = {item.name}> {item.name} </option>)}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = () => {\n    return(\n         <div id=\"title\">\n           <h1>\n             The Art Collector\n           </h1>\n           <h5>\n             Search the Harvard Art Museums' Private Collections\n           </h5>\n         </div>  \n    )\n}\nexport default Title;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({info:{}, records: []});\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return <div className=\"app\">\n\n    {/* <Title /> is static, doesn't need any props */}\n    <Title /> \n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search \n      setIsLoading = {setIsLoading} \n      setSearchResults = {setSearchResults}\n      />\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview\n      searchResults = {searchResults}\n      setIsLoading = {setIsLoading}\n      setSearchResults = {setSearchResults}\n      setFeaturedResult = {setFeaturedResult}\n     />\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature \n    featuredResult = {featuredResult} \n    setIsLoading = {setIsLoading}\n    setSearchResults = {setSearchResults}\n    /> \n    {isLoading ? <Loading />: null} \n  </div>\n}\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */"],"sourceRoot":""}